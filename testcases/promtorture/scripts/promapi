#!/bin/bash
#
# This script requires that it be able to resolve the kube endpoints
# directly. Either use
#     http_proxy=socks5://localhost:1080 ./promapi [...]
# with the proxy in ./scripts/socks5, or use a wireshark link like
# that provided by `kubectl insider` to get direct DNS and connectivity.
#

set -e -u -o pipefail

function usage() {
  echo "Usage: promapi -m target|targetmeta|tsdb|tsdb-head|walreplay|config|flags|runtime|snapshot [-l nnnn]"
  echo
  echo "For tsdb:"
  echo "  -l nnnn : number of entries in the top-n lists to return"
  exit 1
}

# what to fetch
meta=
limit=
while getopts "hm:l:" opt; do
  case ${opt} in
    m)
      meta=$OPTARG
      ;;
    l)
      limit=$OPTARG
      ;;
    \?|h|: )
      usage
      ;;
  esac
done

if [ -z "${meta}" ]; then
  usage
fi

function apiQuery() {
  local endpoint
  endpoint=$1
  shift
  curl -sL "${@}" 'http://prometheus-k8s.monitoring.svc.cluster.local:9090/'"${endpoint}"  | yq --prettyPrint .
}

case "${meta}" in
  target)
    apiQuery "/api/v1/targets" -G --data 'scrapePool=podMonitor/monitoring/promtorture/0'
    ;;
  targetmeta)
    apiQuery "/api/v1/targets/metadata" -G --data 'match_target={job="monitoring/promtorture"}'
    ;;
  tsdb)
    if [ -n "${limit}" ]; then
      apiQuery "/api/v1/status/tsdb" -G --data "limit=${limit}"
    else
      apiQuery "/api/v1/status/tsdb" -G
    fi
    ;;
  tsdb-head)
    apiQuery "/api/v1/status/tsdb" -G | yq .data.headStats
    ;;
  walreplay)
    apiQuery "/api/v1/status/walreplay" -G
    ;;
  config)
    apiQuery "/api/v1/status/config" -G
    ;;
  flags)
    apiQuery "/api/v1/status/flags" -G
    ;;
  runtime)
    apiQuery "/api/v1/status/runtimeinfo" -G
    ;;
  snapshot)
    apiQuery "/api/v1/admin/tsdb/snapshot" -X POST --data 'skip_head=false'
    ;;
  *)
    echo 1>&2 "Unrecognised option: ${meta}"
    usage
    ;;
esac

# vim: set ft=sh et ai sw=2 ts=2 sts=2:
