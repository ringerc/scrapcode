#
# This script expects to generally be sourced once by the login shell,
# so in gnome terminal use
#
#    "Preferences -> Profiles -> Command -> Run Command as Login Shell"
#
# then source from your ~/.bash_profile .
#
# It should work OK when re-sourced in a .bashrc, it's just not useful.
#

function pgbuild() {
    if ! [ -e src/include/pg_config_manual.h ]
    then
        echo "not postgres directory?"
        return
    fi
    local destname="${1:-.}"
    if [ -z "$destname" -o "$destname" == "." ]; then
        destname="$(basename $(pwd))"
    fi
    local variant="${2:-}"
    declare -a configure_args=(--enable-debug --enable-cassert --enable-tap-tests --enable-dtrace)
    local CPP="/usr/lib64/ccache/gcc -E"
    local CC="/usr/lib64/ccache/gcc"
    local CPPFLAGS=
    local CFLAGS="-Og -ggdb3"
    case "${variant:-}" in
	"")
	    ;;
	"NDEBUG")
        configure_args=()
	    ;;
    "CLANG")
        CPP="/usr/lib64/ccache/clang -E"
        CC="/usr/lib64/ccache/clang"
        CFLAGS="${CFLAGS} -fuse-ld=lld -fdebug-macro -O1"
        # The non-asan clang build is also fully valgrind-enabled, it doesn't
        # do much unless run under valgrind.
        CFLAGS="${CFLAGS} -DUSE_VALGRIND -fno-omit-frame-pointer"
        ;;
    "CLANG_ASAN")
        # this is not included in pgbuildall for now
        CPP="/usr/lib64/ccache/clang -E"
        CC="/usr/lib64/ccache/clang"
        CFLAGS="${CFLAGS} -fuse-ld=lld -fdebug-macro -O1"
        # TODO: sanitizer coverage per  https://clang.llvm.org/docs/SanitizerCoverage.html
        # TODO why do we have to set explicit rpath?
        # Pg adds CFLAGS to LDFLAGS already
        CFLAGS="${CFLAGS} -fno-omit-frame-pointer -fsanitize=address -fsanitize-address-use-after-scope -fsanitize-address-use-odr-indicator -frtlib-add-rpath -shared-libasan -fno-common -rpath /usr/lib64/clang/10.0.0/lib/linux -rpath /usr/lib64/clang/10.0.0/lib"
        # TODO runtime  ASAN_OPTIONS=strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
        # via __asan_default_options per https://github.com/google/sanitizers/wiki/AddressSanitizerFlags 
        ASAN_OPTIONS="detect_leaks=0:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:replace_str=1:replace_intrin=1:print_stats=1:atexit=1"
        export ASAN_OPTIONS
        # We could also experiment with memory sanitizing but it's not allowed at the same time as
        # address sanitizing.
        #CFLAGS="${CFLAGS} -fsanitize=memory -fsanitize-memory-track-origins"
        # and flow-control protection
        CFLAGS="${CFLAGS} -fcf-protection"
        # maybe also experiment with heap profiling if palloc doesn't mask it too much
        #CFLAGS="${CFLAGS} -fmemory-profile"
        # TODO: experiment with -flto. Right now it doesn't work because we use 'ar' to create
        # libpgcommon.a and then we break when trying to link it.
        # Enable stack guards on the asan build too
        CFLAGS="${CFLAGS} -fstack-protector-strong"
        ;;
	"CLOBBER")
        CFLAGS="${CFLAGS} -DCLOBBER_CACHE_ALWAYS"
        ;;
	*)
	    echo "unrecognised build variant $variant"
	    return
	    ;;
    esac
    local srcdir="$(pwd)"
    local dest="$HOME/pg/$destname"${variant:+-${variant}}
    if [ -z "$NO_VPATH" ]; then
	local builddir=$HOME/build/$(basename "$srcdir")${variant:+${variant}}
	if [ -z "$builddir" ]; then
	    echo "unable to determine valid build-directory, aborting"
	    return 1
	else
	    echo "Building $srcdir out-of-tree in $builddir"
	fi
	if [ -d "$builddir".old ]; then
	    rm -rf "$builddir".old
	fi
	if [ -d "$builddir" ]; then
	    mv "$builddir" "$builddir".old
	fi
	mkdir -p "$builddir";
	local configurepath="$srcdir/configure"
    else
	echo "in-tree build"
	local builddir=$srcdir
	local configurepath="./configure"
    fi
    if [ -z "${NO_SILENT:-}" ]
    then
	local CONFQUIET="--quiet"
	local SILENT="-s"
    else
	echo "NO_SILENT assigned, going loud"
    fi
    (
    	cd $builddir
	set -e
	echo "configuring for $dest"
	CPPFLAGS="${CPPFLAGS}" CFLAGS="${CFLAGS}" CPP="${CPP}" CC="${CC}" $configurepath $CONFQUIET --cache-file=config.cache${variant:=-${variant}} --prefix="$dest" "${configure_args[@]}"
	echo "configured, making"
	make $SILENT clean
	make $SILENT -j4
	make $SILENT -C contrib -j4
	echo "compiled"
	make $SILENT install
	make $SILENT -C contrib install
	echo "installed to $dest"
    )
    rm -f build${variant:+-${variant}}
    ln -s $builddir build${variant:+-${variant}}
}

function pgbuildall() {
    if [ -n "${NO_VPATH:-}" ]; then
	echo "VO_VPATH set but cannot pgbuildall without vpath"
	return
    fi
    echo "building base variant..."
    pgbuild "$(basename $(pwd))"
    echo "base variant built"
    echo "building NDEBUG variant"
    pgbuild "$(basename $(pwd))" "NDEBUG"
    echo "NDEBUG variant built"
    echo "building NDEBUG variant"
    pgbuild "$(basename $(pwd))" "CLANG"
    echo "CLANG variant built"
    ls -d build*
}

#
# Builder wrapper for pgl3 and bdr3 that sets up the right path, does
# out-of-tree builds, cleans cores, etc.
#
function extbuild() {
    declare extlabel=${1?no ext descriptive label supplied}
    declare extname=${2?no ext name specified}
    declare extfile=${3?no file to test for presence of specified}
    declare extgenfile=${4?no file to test for dirty vpath specified}
    if [ -z "${5:-}" ]; then
	echo 1>&2 "no target postgres version specified"
	echo 1>&2 "candidates are:"
	(cd $HOME/pg && find * -maxdepth 0 -type d) | sed 's/^/    /' 1>&2
	echo 1>&2
	return 1
    fi
    declare pgver=$5
    shift 5

    if ! [ -e ${extfile} ]; then
	echo "not a ${extname} directory: no ${extfile}"
	return 1
    fi

    # find target
    declare destname="$HOME/pg/${pgver}"
    if [ ! -e $destname/bin/psql ]; then
	echo "no postgresql in $destname"
	return 1
    fi
    local pgpath="${destname}/bin"
    local newpath="${pgpath}:${PATH}"
    echo "Using $pgpath"
    echo "Targeting $(PATH=$newpath psql --version)"
    # corefile cleanup for regress
    mkdir -p $HOME/core/old >&/dev/null
    mv -f ~/core/*.core ~/core/old/ >&/dev/null
    # vpath checking and setup
    local srcdir="$(pwd)"
    if [ -z "$NO_VPATH" ]; then
	if [ -e "${extgenfile}" ]; then
	    echo "${extgenfile} exists in srcdir. Cleaning source directory to allow clean vpath build."
	    PATH="$newpath" make -s clean
	fi
	if [ -e "${extgenfile}" ]; then
	    echo "${extgenfile} still exists in srcdir, clean vpath build not possible. Clean source dir."
	    return 1
	fi
	local builddir=$HOME/build/$(basename "$srcdir")
	if [ -z "$builddir" ]; then
	    echo "unable to determine valid build-directory, aborting"
	    return 1
	else
	    echo "Building $srcdir out-of-tree in $builddir"
	fi
	if [ -d "$builddir".old ]; then
	    rm -rf "$builddir".old
	fi
	if [ -d "$builddir" ]; then
	    mv "$builddir" "$builddir".old
	fi
	mkdir -p "$builddir";
	local MAKEFILEARG="-f $srcdir/Makefile"
    else
	echo "in-tree build"
	local builddir=$srcdir
	local MAKEFILEARG=""
    fi
    if [ -z "${NO_SILENT:-}" ]
    then
	local SILENT="-s"
    else
	echo "NO_SILENT assigned, going loud"
    fi
    # and finally go
    (
	cd "$builddir";
	PATH="$newpath" make $MAKEFILEARG $SILENT REGRESS_LOG_MIN_MESSAGES=debug2 PROVE_FLAGS="--verbose" "$@"
    )
    echo "rebuild and install done"
    rm -f build
    ln -s $builddir build
}

function pgl3build() {
    extbuild "pglogical3" "pglogical" "pglogical.h" "pglogical.control" "$@"
}

function bdr3build() {
    extbuild "bdr3" "bdr" "bdr.h" "bdr.control" "$@"
}

alias pgl3make=pgl3build
alias bdr3make=bdr3build

# Use libsecret for my secret env vars now
#
# Store or update with:
#
#    echo -n 'xxsecretxx' | secret-tool store --label 'Environment variable TPA_2Q_SUBSCRIPTION_TOKEN' ENV_VAR TPA_2Q_SUBSCRIPTION_TOKEN
#

declare -a secret_env_vars=(TPA_2Q_SUBSCRIPTION_TOKEN SECONDQ_GITLAB_READ_ONLY_TOKEN)

for secret_env_var in "${secret_env_vars[@]}"; do
    read -r $secret_env_var < <(secret-tool lookup ENV_VAR $secret_env_var)
done

TPA_GIT_CREDENTIALS=${SECONDQ_GITLAB_READ_ONLY_TOKEN:-"unable to read SECONDQ_GITLAB_READ_ONLY_TOKEN"}
export TPA_GIT_CREDENTIALS

# Launch a psql against a running pg_regress instance
# without messing around reading the logs.
#
function regress_psql() {
    pgpidf="tmp_check/data/postmaster.pid"
    if ! [ -e "$pgpidf" ]
    then
	echo "no postmaster.pid at $pgpidf"
	return 1
    fi

    PGPORT="$(awk 'NR==4 { print $0; }' "$pgpidf")"
    PGHOST="$(awk 'NR==5 { print $0; }' "$pgpidf")"
    connstr="host='$PGHOST' port=$PGPORT dbname='postgres'"
    echo "connstr: \"$connstr\""
    psql -v PROMPT1="%M:%> [%p] %n@%/=%# " -v PROMPT2="%M:%> [%p] %n@%/+%# " -q "$connstr" "$@"
}

# Run gdb on the latest core file, resolving the correct executable
# automatically.
function gdblast() {
    c=$(cd ~/core/ && ls -c *.core | tail -1 );
    p=$(echo "$c" | awk -F - '{ gsub("!","/",$2); print $2;}');
    gdb -q $p ~/core/"$c" -ex 'info inferiors' -ex 'info sharedlibrary \(pglogical\|bdr\)';
}

export PG_REGRESS_DIFF_OPTS="-u"

export LESS="--tabs=4 -R"

export PATH=$HOME/.cargo/bin:$PATH:$HOME/apps/groovy/bin

# for jremote tool:
export JENKINS_URL=https://ci.2ndquadrant.com/jenkins/
export JENKINS_CREDS=$HOME/.jenkins_creds

# git completions
. /usr/share/doc/git/contrib/completion/git-completion.bash
. /usr/share/doc/git/contrib/completion/git-prompt.sh

# This just does the git bash prompt
#PROMPT_COMMAND='__git_ps1 "\\j \\w" "\\\$ "'

# This sets the title too
PROMPT_COMMAND='__git_ps1 "\\j \\w" "\\\$ "; printf "\e]2;%s\a" "${PS1@P}"'
PROMPT_DIRTRIM=2
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
export PROMPT_COMMAND PROMPT_DIRTRIM

function pg() {
    local ver=${1:-2q1137}
    local subdir
    case "${ver}" in
        2[qQ]10)
            subdir=2QREL_10_STABLE
            ;;
        2[qQ]11*3*6)
            subdir=2QREL_11_STABLE_3_6
            ;;
        2[qQ]11*3*7|2[qQ]11)
            subdir=2QREL_11_STABLE_dev
            ;;
        2[qQ]12)
            subdir=2QREL_12_STABLE_dev
            ;;
        2[qQ]13)
            subdir=2QREL_13_STABLE_dev
            ;;
        2[qQ]14)
            subdir=2QREL_14_STABLE_dev
            ;;
        10|11|12|13|14)
            subdir=REL_${ver}_STABLE
            ;;
        9*4)
            subdir=REL9_4_STABLE
            ;;
        9*5)
            subdir=REL9_5_STABLE
            ;;
        9*5)
            subdir=REL9_6_STABLE
            ;;
        *)
            subdir="${ver}"
            ;;
    esac
    pushd ~/projects/2Q/postgres/${subdir}
}

function pgl() {
    local subdir="${1:-master}"
    if [ "${1:-}" == "36" ]; then
        subdir=REL3_6_STABLE
    fi
    pushd ~/projects/2Q/pglogical/pglogical-${subdir}
}

function bdr() {
    local subdir="${1:-master}"
    if [ "${1:-}" == "36" ]; then
        subdir=REL3_6_STABLE
    fi
    pushd ~/projects/2Q/bdr/bdr-${subdir}
}

PAGER="less -x 4"
export PAGER

export PGPORT=5433

export EDITOR=vim

export MOZ_DBUS_REMOTE = 1

# vim: ts=4 sw=4 et ai
