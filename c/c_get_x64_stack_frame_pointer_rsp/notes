tried a few approaches

   saving %rsp directly
   gcc's __builtin_frame_address(0)

   libunwind

When didn't jump, and using the %rsp approach, this works

    frame view last_jumped_from+48 getframe


with the __builtin_frame_address(0) approach I can pick the frame with

    frame view last_jumped_from-16 getframe

and the args show up sensibly, but "info locals" complains

	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	No locals.
	warning: Unable to restore previously selected frame.

and so does "info args", so no idea.




To search the stack for candidates for a function given a possible argument set
to <<funcname>> use:

set $start = (unsigned long int) last_jumped_from
set $step = -2
set pagination off
set $i = 0
set $func = getframe
define searchstack
 frame view $start+$i $func
 set $val = arg
 if ($val != 420)
  set $i = $i - $step
  searchstack
 else
  print $i
 end
end



with libunwind I can get the stack pointers from after the longjmp by unwinding
it using libunwind itself, but the instruction pointers are garbage:

	./unwind foobarbaz 420 1
	sizeof(unw_context_t) = 968
	rsp   = 0x00007ffefe19d450
	rip   = 0x0000000000401367
	arg   = 420
	rand  = 1804289383
	msg   = foobarbaz
	--begin trace--
	    ip = 4014be, sp = 7ffefe19dc50
	    ip = 4014f8, sp = 7ffefe19de70
	    ip = 4015cf, sp = 7ffefe19de90
	    ip = 7f742d8e71e2, sp = 7ffefe19dec0
	    ip = 40113e, sp = 7ffefe19df90
	--end trace--
	I'm going to crash: foo bar baz
	make: *** [Makefile:3: run-unwind] Aborted (core dumped)

The sp from after looks sensible, the ip does not and sure enough:

	(gdb) info frame view 0x7ffefe19dc50 0x4014be
	Stack frame at 0x7ffefe19dc50:
	 rip = 0x4014be in call_getframe (unwind.c:104); saved rip = 0x7f7f7f7f7f7f7f7f
	 called by frame at 0x7ffefe19de18
	 source language c.
	 Arglist at 0x7ffefe19dbe8, args: arg=32628, msg=0x7ffefe19de20 "w\361\031\376\376\177", dojump=766358910
	 Locals at 0x7ffefe19dbe8, Previous frame's sp is 0x7ffefe19de10
	 Saved registers:
	  rip at 0x7ffefe19de08

if use my knowledge that the ip must've been <<getframe>> I can try to get a bt but it's nonsense

	(gdb) info frame view 0x00007ffefe19d450 0x0000000000401367
	Stack frame at 0x7ffefe19d450:
	 rip = 0x401367 in getframe (unwind.c:74); saved rip = <not saved>
	 Outermost frame: previous frame identical to this frame (corrupt stack?)
	 source language c.
	 Arglist at 0x7ffefe19dbe8, args: arg=0, msg=0x4000000041 <error: Cannot access memory at address 0x4000000041>, dojump=0warning: Unable to restore previously selected frame.

	 Locals at 0x7ffefe19dbe8, Previous frame's sp is 0x7ffefe19e3f0
	 Saved registers:
	  rip at 0x7ffefe19e3e8
	(gdb) frame view 0x00007ffefe19d450 0x0000000000401367
	#0  getframe (arg=0, msg=0x4000000041 <error: Cannot access memory at address 0x4000000041>, dojump=0warning: Unable to restore previously selected frame.
	) at unwind.c:74
	74		memcpy(&last_jumped_from, &ctx, sizeof(unw_context_t));
	(gdb) info locals
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	No locals.
	warning: Unable to restore previously selected frame.
	(gdb) info args
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	No arguments.
	(gdb)

and it seems to be clobbered by unwinding so I couldn't find it with <<searchstack>> either. Though I can't even if I try to skip the
unwinding.


I did confirm that unwind and gcc agree on the sp

	./unwind foobarbaz 420 1
	sizeof(unw_context_t) = 968
	rsp   = 0x00007fff82fb2680
	rip   = 0x000000000040136d
	arg   = 420
	rand  = 1804289383
	msg   = foobarbaz
	gccsp = 0x00007fff82fb2e80
	I'm going to crash: foo bar baz
	make: *** [Makefile:3: run-unwind] Aborted (core dumped)
	0 ~/.../c/c_get_x64_stack_frame_pointer_rsp (master *)$ gdblast
	Reading symbols from /home/craig/projects/scrapcode/c/c_get_x64_stack_frame_pointer_rsp/unwind...
	[New LWP 3898005]
	Core was generated by `./unwind foobarbaz 420 1'.
	Program terminated with signal SIGABRT, Aborted.
	#0  __GI_raise (sig=<optimized out>) at ../sysdeps/unix/sysv/linux/raise.c:49
	49	  return ret;
	  Num  Description       Connection           Executable
	* 1    process 3898005   1 (core)             /home/craig/projects/scrapcode/c/c_get_x64_stack_frame_pointer_rsp/unwind
	No shared libraries matched.
	Missing separate debuginfos, use: dnf debuginfo-install libunwind-1.4.0-4.fc33.x86_64
	(gdb) p last_jumped_from_gcc
	$1 = (void *) 0x7fff82fb2e80
	(gdb) p last_jumped_from_unwind
	$2 = (void *) 0x7fff82fb2680
	(gdb) info frame view 0x7fff82fb2e80 getframe
	Stack frame at 0x7fff82fb2e80:
	 rip = 0x401338 in getframe (unwind.c:67); saved rip = 0x0
	 called by frame at 0x7fff82fb2e40
	 source language c.
	 Arglist at 0x7fff82fb2e28, args: arg=0, msg=0x5 <error: Cannot access memory at address 0x5>, dojump=4199622
	 Locals at 0x7fff82fb2e28, Previous frame's sp is 0x7fff82fb2e38
	 Saved registers:
	  rip at 0x7fff82fb2e30
	(gdb) info frame view (0x7fff82fb2e80+16) getframe
	Stack frame at 0x7fff82fb2e90:
	 rip = 0x401338 in getframe (unwind.c:67); saved rip = <not saved>
	 Outermost frame: previous frame identical to this frame (corrupt stack?)
	 source language c.
	 Arglist at 0x7fff82fb2e28, args: arg=420, msg=0x7fff82fb4177 "foobarbaz", dojump=1
	 Locals at 0x7fff82fb2e28, Previous frame's sp is 0x7fff82fb2e38
	 Saved registers:
	  rip at 0x7fff82fb2e30
	(gdb) frame view (0x7fff82fb2e80+16) getframe
	#0  getframe (arg=420, msg=0x7fff82fb4177 "foobarbaz", dojump=1warning: Unable to restore previously selected frame.
	) at unwind.c:67
	67	{
	(gdb) info locals
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	No locals.
	warning: Unable to restore previously selected frame.
	(gdb) info args
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	No arguments.
	(gdb)


at a guess we need more register state etc

further more if I crash before the longjmp() i get


	(gdb) bt
	#0  __GI_raise (sig=<optimized out>) at ../sysdeps/unix/sysv/linux/raise.c:49
	#1  0x00007f5e8c90e8a4 in __GI_abort () at abort.c:79
	#2  0x0000000000401338 in callee (dojump=0) at unwind.c:56
	#3  0x00000000004014c6 in getframe (arg=420, msg=0x7fff52343177 "foobarbaz", dojump=0) at unwind.c:98
	#4  0x0000000000401509 in call_getframe (arg=420, msg=0x7fff52343177 "foobarbaz", dojump=0) at unwind.c:114
	#5  0x0000000000401554 in caller (arg=420, msg=0x7fff52343177 "foobarbaz", dojump=0) at unwind.c:127
	#6  0x000000000040160e in main (argc=4, argv=0x7fff52341df8) at unwind.c:139
	(gdb) p last_
	last_entry               last_family              last_jumped_from_gcc     last_nip
	last_environ             last_jumped_from         last_jumped_from_unwind  last_type
	(gdb) p last_jumped_from_gcc
	$1 = (void *) 0x7fff52341a90
	(gdb) p last_jumped_from_unwind
	$2 = (void *) 0x7fff52341290
	(gdb) info frame view (0x7fff52341a90+16) getframe
	Stack frame at 0x7fff52341aa0:
	 rip = 0x401338 in getframe (unwind.c:67); saved rip = 0x0
	 called by frame at 0x7fff52341030
	 source language c.
	 Arglist at 0x7fff52341018, args: arg=420, msg=0x7fff52343177 "foobarbaz", dojump=0
	 Locals at 0x7fff52341018, Previous frame's sp is 0x7fff52341028
	 Saved registers:
	  rip at 0x7fff52341020
	(gdb) frame view (0x7fff52341a90+16) getframe
	#0  getframe (arg=420, msg=0x7fff52343177 "foobarbaz", dojump=0) at unwind.c:67
	67	{
	(gdb) info locals
	some_local = 1804289383
	ctx = {...}
	ip = 4199277
	sp = 140734572532368
	(gdb) info args
	arg = 420
	msg = 0x7fff52343177 "foobarbaz"
	dojump = 0
	(gdb)

so it's clearly sensible before jumping.

Are we clobbering the stack despite the padding?

Is the padding in the wrong place?


ok, added some vars for both to track

now I get

	./unwind foobarbaz 420 1
	sizeof(unw_context_t) = 968
	rsp   = 0x00007ffc85a85910
	rip   = 0x0000000000401371
	arg   = 420
	rand  = 1804289383
	msg   = foobarbaz
	gccsp = 0x00007ffc85a86110
	I'm going to crash: foo bar baz
	make: *** [Makefile:3: run-unwind] Aborted (core dumped)

	(gdb) p last_jumped_from_gcc
	$1 = (void *) 0x7ffc85a86110
	(gdb) p last_jumped_from_unwind
	$2 = (void *) 0x7ffc85a85910
	(gdb) p last_jumped_from_gcc - last_jumped_from_unwind
	$3 = 2048
	(gdb) info frame view last_jumped_from_gcc+16 getframe
	Stack frame at 0x7ffc85a86120:
	 rip = 0x401338 in getframe (unwind.c:67); saved rip = 0x0
	 called by frame at 0x7ffc85a862c0
	 source language c.
	 Arglist at 0x7ffc85a862a8, args: arg=420, msg=0x7ffc85a87177 "foobarbaz", dojump=1
	 Locals at 0x7ffc85a862a8, Previous frame's sp is 0x7ffc85a862b8
	 Saved registers:
	  rip at 0x7ffc85a862b0

	(gdb)  frame view last_jumped_from_gcc+16 getframe
	#0  getframe (arg=420, msg=0x7ffc85a87177 "foobarbaz", dojump=1warning: Unable to restore previously selected frame.
	) at unwind.c:67
	67	{
	(gdb) info locals
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	No locals.
	warning: Unable to restore previously selected frame.
	(gdb) info args
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	warning: Unable to restore previously selected frame.
	No arguments.


so gcc's is sensibleish but unwinds is off somehow.

it's always 2048 different.

wtf.

I adjusted the program so only the argument to getframe would have arg=420, the
others get bitwise negated. it must be the right place.

why can't gdb get the locals and args? it can print them in "info frame view"
but not "info locals" or "info args"


TODO study if sigaltstack debugging techniques can help us. see man sigaltstack.
