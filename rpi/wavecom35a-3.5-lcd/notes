
https://gist.github.com/notro/63fc8f563b5f85010d30

"gpio" command ! woah

SPEC https://www.waveshare.com/wiki/3.5inch_RPi_LCD_(A)

https://elinux.org/Device_Tree_Source_Undocumented

https://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git/tree/drivers/staging/fbtft/README?h=staging-testing
https://github.com/notro/fbtft/wiki/Device-Tree
https://github.com/notro/fbtft/wiki/FBTFT-RPI-overlay


https://www.kernel.org/doc/Documentation/devicetree/bindings/spi/
https://www.kernel.org/doc/Documentation/devicetree/bindings/spi/spi-controller.yaml

controller is https://www.kernel.org/doc/Documentation/devicetree/bindings/pinctrl/brcm%2Cbcm2835-gpio.txt

https://www.kernel.org/doc/Documentation/devicetree/bindings/pinctrl/pinctrl-bindings.txt


AHA! the documented pinout like https://www.waveshare.com/3.5inch-rpi-lcd-a.htm is the rPi physical pinout. The device-tree config uses the GPIO numbers like https://www.researchgate.net/figure/Schematic-zoom-of-the-Raspberry-Pi-3-B-pins-Adapted-from-14_fig2_351755761

con2fbmap
chvt

driver = fb_ili9486 (fbtft based)


# lock cpu freq
for f in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
  echo 'performance' | sudo tee -a $f;
done
for f in /sys/devices/system/cpu/cpu*/cpufreq/{scaling_min_freq,scaling_max_freq}; do
  echo '500000' | sudo tee -a $f;
done

cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq

cat /sys/kernel/debug/clk/clk_summary

https://starfishmedical.com/blog/raspberry-pi-clock-conundrum/


try dtparam uart1 on / off ?

vcgencmd get_config  str



# tis doesn't seem right
#
# I actually observe somewhat working with reset 0x19 (25), dc 0x18 (24), pendown 0x11 (17)
# which is wtf. Data pin must be right if display can show stuff.
#
# but all refs agree https://www.waveshare.com/3.5inch-rpi-lcd-a.htm
#


    LCD panel: Ilitek ILI9486
    Touch layer: ADS7846
    Touch controller: XPT2046

Pin     Symbol  Description
1, 17   3.3V    + Power rail
2, 4    5V      + Power rail
3, 5, 7, 8, 10, 12, 13, 15, 16  NV      NC
6, 9, 14, 20, 25        GND     Ground
11      TP_IRQ  Touch panel interrupt, pulled low during touch
18      LCD_RS  LCD instruction control, Instruction/Data register selection
19      LCD_SI/TP_SI    SPI data input of both LCD & touch panel
21      TP_S0   SPI data output of touch panel
22      RST     Reset
23      LCD_SCK/TP_SCK  SPI clock for both LCD & touch panel
24      LCD_CS  LCD chip select (active low)
26      TP_CS   Touch panel chip select (active low)


/*
 * Pin mapping
 * PHY GPIO   NAME            INOUT    PULL   ACTIVE    DESC
 * 11    17   TP_IRQ             IN      H?      LOW    Touch panel interrupt, pulled low during touch
 * 18    24   LCD_RS            OUT                     LCD instruction control, Instruction/Data register selection
 * 19    10   LCD_SI/TP_SI      OUT                     SPI data input of both LCD & touch panel
 * 21     9   TP_S0              IN                     SPI data output of touch panel
 * 22    25   RST               OUT      H?             Reset
 * 23    11   LCD_SCK/TP_SCK    OUT                     SPI clock for both LCD & touch panel
 * 24     8   LCD_CS            OUT      H?      LOW    LCD chip select (active low)
 * 26     7   TP_CS             OUT      H?      LOW    Touch panel chip select (active low)
 */

/proc/device-tree/soc/gpio@7e200000/spi0_pins/brcm,pins
0000000 0000 0900 0000 0a00 0000 0b00
0000014

/proc/device-tree/soc/gpio@7e200000/spi0_gpio7/brcm,pins
0000000 0000 0700 0000 0800 0000 0900 0000 0a00
0000020 0000 0b00
0000024

/proc/device-tree/soc/gpio@7e200000/alt0/brcm,pins
0000000 0000 0400 0000 0500 0000 0700 0000 0800
0000020 0000 0900 0000 0a00 0000 0b00
0000034


what about using spi0-2cs ?

craig@raspberrypi:~ $ sudo dtoverlay -h spi0-2cs
Name:   spi0-2cs

Info:   Change the CS pins for SPI0

Usage:  dtoverlay=spi0-2cs,<param>=<val>

Params: cs0_pin                 GPIO pin for CS0 (default 8)
        cs1_pin                 GPIO pin for CS1 (default 7)
        no_miso                 Don't claim and use the MISO pin (9), freeing
                                it for other uses.



https://raspberrypi.stackexchange.com/questions/24279/disable-bcm2708-fb-the-hdmi-framebuffer-device


Looks like it works if I disable the use of /dev/fb0 on /usr/share/X11/xorg.conf.d/99-fbturbo.conf




touch is ads7846
but no worky?
[  788.783946] SPI driver ads7846 has no spi_device_id for ti,tsc2046
[  788.783979] SPI driver ads7846 has no spi_device_id for ti,ads7843
[  788.783992] SPI driver ads7846 has no spi_device_id for ti,ads7845
[  788.784003] SPI driver ads7846 has no spi_device_id for ti,ads7873
relevant? why no evdev?

sudo dtoverlay ads7846 penirq=17 xohms=60 pmax=255
sudo dtoverlay ads7846 cs=1 penirq=17 penirq_pull=2 speed=50000 swapxy=0 pmax=255 xohms=80 xmin=20


someone else's:
dtoverlay=ads7846,cs=1,penirq=25,penirq_pull=2,speed=50000,keep_vref_on=0,swapxy=0,pmax=255,xohms=150,xmin=200,xmax=3900,ymin=200,ymax=3900 

https://www.kernel.org/doc/Documentation/devicetree/bindings/input/ads7846.txt
